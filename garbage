
/*

import androidx.annotation.ColorRes
import androidx.annotation.DrawableRes
import androidx.annotation.MenuRes
val appBarSubTitle: Any = 0,
    @MenuRes
    val optionsMenuId: Int = 0,
    @DrawableRes
    val homeIconId: Int = 0,
    @ColorRes
    val statusBarColor: Int = 0,
@ColorRes
val appBarColor: Int = 0,
@ColorRes
val appBarTitleColor: Int = 0,
@DrawableRes
val appWindowBackground: Int = 0,
val homeIconBackPressEnabled: Boolean = true,
@TransitionRes
val enterTransition : Int = 0,
@TransitionRes
val exitTransition : Int = 0
*/


/*
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.1'
    implementation 'androidx.databinding:databinding-runtime:7.1.2'
    implementation 'androidx.core:core-ktx:1.7.0'
  implementation 'androidx.appcompat:appcompat:1.4.1'
  implementation 'com.google.android.material:material:1.5.0'
  */



/*
implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'
implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'
implementation 'androidx.navigation:navigation-fragment-ktx:2.4.1'
implementation 'androidx.navigation:navigation-ui-ktx:2.4.1'
implementation 'androidx.databinding:databinding-runtime:7.1.2'
*/

/*implementation 'androidx.core:core-ktx:1.7.0'
   implementation 'androidx.appcompat:appcompat:1.4.1'
   implementation 'com.google.android.material:material:1.5.0'*/




/*
@PrimaryKey
@RealmField
var key = ONE*/



    <EditText
                style="@style/AppTheme.EditText.Chat"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:autofillHints="@null"
                android:hint="@string/hint_chat_message"
                android:inputType="textMultiLine|text" />

            <ImageButton
                style="@style/AppTheme.ImageButton"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_gravity="center_vertical|end"
                android:contentDescription="@null"
                app:srcCompat="@drawable/ic_send_white_24dp" />


                        <androidx.recyclerview.widget.RecyclerView
                            android:id="@+id/rv_message_list"
                            android:layout_width="0dp"
                            android:layout_height="0dp"
                            app:layout_constraintTop_toTopOf="parent"
                            app:layout_constraintStart_toStartOf="parent"
                            app:layout_constraintEnd_toEndOf="parent"
                            app:layout_constraintBottom_toTopOf="@+id/layout_send_message"
                            android:visibility="@{model.listMessages.empty ? View.GONE : View.VISIBLE}"
                            app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
                            bind:eventHandler="@{model.listEventHandler}"
                            bind:items="@{model.listMessages}" />




  ************* MEALS DATA VIEW MODEL ******************************************

           private valcontext = application.applicationContext
           private val repo = MealsRepository()

           fun testJSON() {
               val gson = Gson()
               val json = gson.toJson(repo.m)

               val gsonPretty = GsonBuilder().setPrettyPrinting().create()
               val prettyJson: String = gsonPretty.toJson(json)

               val filename = "meals.json"
               val file = File(context.filesDir, filename)

               file.writeText(prettyJson)
           }

           fun getMealsFromJSON() {
               val filename = "meals.json"
               val file = File(context.filesDir, filename)

               context.openFileInput(filename).bufferedReader().useLines { lines ->
                   lines.fold("") { some, text ->
                       "$some\n$text"
                   }
               }
           }

           fun convertMealsToJSON() {
               val gson = Gson()
               val json = gson.toJson(repo.m)
               val filename = "meals.json"
               val fileContents = "Hello world!"

               val file = File(context.filesDir, filename)

               val fos: FileOutputStream = context.openFileOutput(filename, Context.MODE_PRIVATE)
               fos.write(fileContents.toByteArray())

               context.openFileInput(filename).bufferedReader().useLines { lines ->
                   lines.fold("") { some, text ->
                       "$some\n$text"
                   }
               }
           }


           import android.annotation.SuppressLint
           import android.app.Application
           import android.content.Context
           import androidx.lifecycle.AndroidViewModel
           import com.google.gson.Gson
           import com.google.gson.GsonBuilder
           import com.plataforma.crpg.ui.meals.MealsRepository
           import java.io.File
           import java.io.FileOutputStream



/*
text_opcao_carne.text = mealsViewModel.retrievedMeal.carne
text_opcao_peixe.text = mealsViewModel.retrievedMeal.peixe
text_opcao_dieta.text = mealsViewModel.retrievedMeal.dieta
text_opcao_vegetariano.text = mealsViewModel.retrievedMeal.vegetariano
*/

******   MEALS FRAGMENT    **********************************************

 if (!cardCarne.isChecked) {
    mealsViewModel.selectedOption = 1
} else {
    mealsViewModel.selectedOption = 0
}
cardCarne.isChecked = !cardCarne.isChecked
cardPeixe?.isChecked = false
cardDieta?.isChecked = false
cardVeg?.isChecked = false


/*
if (!cardPeixe.isChecked) {
    mealsViewModel.selectedOption = 2
} else {
    mealsViewModel.selectedOption = 0
}.apply { !cardPeixe.isChecked }
cardCarne?.isChecked = false
cardDieta?.isChecked = false
cardVeg?.isChecked = false


if (!cardDieta.isChecked) {
    mealsViewModel.selectedOption = 3
} else {
    mealsViewModel.selectedOption = 0
}
cardDieta.isChecked = !cardDieta.isChecked
cardCarne?.isChecked = false
cardPeixe?.isChecked = false
cardVeg?.isChecked = false


if (!cardVeg.isChecked) {
    mealsViewModel.selectedOption = 4
} else {
    mealsViewModel.selectedOption = 0
}
cardVeg.isChecked = !cardVeg.isChecked
cardCarne?.isChecked = false
cardPeixe?.isChecked = false
cardDieta?.isChecked = false
*/


    private val MEALS_FILES_DIR = ctx.filesDir.toString()


            if (textToSpeech != null) {
                textToSpeech!!.stop()
                textToSpeech!!.shutdown()
                println("shutdown TTS")
            }



                private fun setButtonColorsReminder(view: LayoutSecondLembrarBinding, pos: Int){

                    with(view){
                        this.button0.setBackgroundResource(R.color.md_blue_100)
                        this.button1.setBackgroundResource(R.color.md_blue_100)
                        this.button2.setBackgroundResource(R.color.md_blue_100)
                        this.button3.setBackgroundResource(R.color.md_blue_100)

                        when(pos){
                            1 -> button0.setBackgroundResource(R.color.md_blue_200)
                            2 -> button1.setBackgroundResource(R.color.md_blue_200)
                            3 -> button2.setBackgroundResource(R.color.md_blue_200)
                            4 -> button0.setBackgroundResource(R.color.md_blue_200)
                        }
                    }
                }

                private fun setButtonColorsDays(view: LayoutSecondDiaBinding, pos: Int){

                    with(view) {
                        this.buttonHoje.setBackgroundResource(R.drawable.layout_button_round_top)
                        this.buttonTodosDias.setBackgroundResource(R.color.md_blue_100)
                        this.buttonPersonalizado.setBackgroundResource(R.drawable.layout_button_round_bottom)

                        when (pos) {
                            1 -> this.buttonHoje.setBackgroundResource(R.drawable.layout_button_round_top)
                            2 -> this.buttonTodosDias.setBackgroundResource(R.color.md_blue_100)
                            3 -> buttonPersonalizado.setBackgroundResource(R.drawable.layout_button_round_bottom)
                        }
                    }
                }

                private fun setSoundLogosVisible(
                    view: LayoutSecondDiaBinding,
                    value: Int,
                    soundVisible: Boolean,
                    vibVisible: Boolean,
                    bothVisible: Boolean
                ){
                    alarmTypeButtonPressed = value
                    cbSom.visibility = VISIBLE
                    cbVib.visibility = INVISIBLE

                    view.buttonSelecionarDias.visibility = when {
                        soundVisible || vibVisible || bothVisible -> VISIBLE
                        !soundVisible || !vibVisible || !bothVisible  -> INVISIBLE
                        else -> { INVISIBLE }
                    }

                }


                fun setLembrarLayout(
                    viewLembrar: LayoutSecondLembrarBinding,
                    value: Int,
                    isVisible: Boolean,
                    isTextVisible: Boolean,
                ){
                    lembrarButtonPressed = value
                    setButtonColorsReminder(lembrarButtonPressed)
                    when {
                        isVisible -> viewLembrar.inserirTituloLembretePersonalizado.visibility = VISIBLE
                        !isVisible -> viewLembrar.inserirTituloLembretePersonalizado.visibility = INVISIBLE
                    }

                    when {
                        isTextVisible -> viewLembrar.textEditPersonalizado.visibility = VISIBLE
                        !isTextVisible -> viewLembrar.textEditPersonalizado.visibility = INVISIBLE
                    }
                }

                fun setSecondLayout(
                    view: LayoutSecondDiaBinding,
                    value: Int,
                    isbuttonVisible: Boolean,
                    isGroupVisible: Boolean,
                ){
                    alarmFreqButtonPressed = value
                    setButtonColorsDays(alarmFreqButtonPressed)
                    view.buttonSelecionarDias.visibility = when {
                        isbuttonVisible -> VISIBLE
                        !isbuttonVisible -> INVISIBLE
                        else -> { INVISIBLE }
                    }

                    view.toggleButtonGroup.visibility = when {
                        isGroupVisible -> VISIBLE
                        !isGroupVisible -> INVISIBLE
                        else -> { INVISIBLE }
                    }
                }

                private fun performActionWithVoiceCommand(
                    view: ReminderFragmentBinding,
                    command: String,
                ) {
                    helper.checkHoursCommand(view, command)
                    helper.checkMinutesCommand(view, command)

                    with(view){
                        when {
                            command.contains(
                                "Lembrete",
                                true
                            ) -> this.parentLayout.performClick()
                            command.contains("Horas", true) ->
                                expandableHoras.run { performClick(); requestFocus() }

                            command.contains("Dia", true) -> {
                                expandableDia.run { performClick(); requestFocus() }
                            }
                            command.contains("Alerta", true) -> {
                                expandableAlerta.run { performClick(); requestFocus() }
                            }
                            command.contains("Notas", true) -> {
                                expandableNotas.run { performClick(); requestFocus() }
                            }
                            command.contains("Cancelar", true) -> buttonCancel.performClick()
                            command.contains("Guardar", true) -> buttonConfirm.performClick()
                            command.contains("Todos", true) -> {
                                expandableLembrar.performClick()
                                expandableDia.performClick()
                                expandableHoras.performClick()
                                expandableAlerta.performClick()
                                expandableNotas.performClick()
                            }
                            command.contains("Tomar Medicação", true) -> secondLembrar.button0.performClick()
                            command.contains("Apanhar Transporte", true) -> secondLembrar.button1.performClick()
                            command.contains("Escolher Almoço", true) -> secondLembrar.button2.performClick()
                            command.contains("O Meu Lembrete", true) -> secondLembrar.button3.performClick()
                            command.contains("Som", true) -> secondAlerta.imageButtonSom.performClick()
                            command.contains("Vibrar", true) -> secondAlerta.imageButtonVibrar.performClick()
                            command.contains("Ambos", true) -> secondAlerta.imageButtonAmbos.performClick()
                            command.contains("Hoje", true) -> secondDia.buttonHoje.performClick()
                            command.contains("Sempre", true) -> secondDia.buttonTodosDias.performClick()
                            command.contains("Escolher Dias", true) -> secondDia.buttonPersonalizado.performClick()
                            else -> {}
                        }
                    }
                }



                 command.contains("uma") || command.contains(
                                    "1", t) -> editHours.setText("01")

                                command.contains("duas") || command.contains(
                                    "2", t) -> editHours.setText("02")

                                command.contains("") || command.contains(
                                    "3", t) -> editHours.setText("03")

                                command.contains("") || command.contains(
                                    "4",) -> editHours.setText("04")

                                command.contains("cinco") || command.contains(
                                    "5", t) -> editHours.setText("05")

                                command.contains("seis") || command.contains(
                                    "6", t) -> editHours.setText("06")

                                command.contains("sete") || command.contains(
                                    "7", t) -> editHours.setText("07")

                                command.contains("oito", t) || command.contains(
                                    "8", t) -> editHours.setText("08")

                                command.contains("nove", t) || command.contains(
                                    "9", t) -> editHours.setText("09")

                                command.contains("dez", t) || command.contains(
                                    "10", t) -> editHours.setText("10")

                                command.contains("onze") || command.contains(
                                    "11", t) -> editHours.setText("11")



    //CHECK NIGHTIME

    command.contains("",t) || command.contains("8",t) -> editHours.setText("20")
                    command.contains("") || command.contains(
                        "9", t) -> editHours.setText("")
                    command.contains("") || command.contains(
                        "10", t) -> editHours.setText("")
                    command.contains("") || command.contains(
                        "11", t) -> editHours.setText("")


                                with(view.secondHoras) {
                                        when {
                                            command.contains("", t) || command.contains(
                                                "1", t) -> editHours.setText("")

                                            command.contains("") || command.contains(
                                                "2", t) -> editHours.setText("")

                                            command.contains("") || command.contains(
                                                "3", t) -> editHours.setText("")

                                            command.contains("") || command.contains(
                                                "4", t) -> editHours.setText("")

                                            command.contains("") || command.contains(
                                                "5", t) -> editHours.setText("")

                                            command.contains("") || command.contains(
                                                "6", t) -> editHours.setText("")

                                            command.contains("") || command.contains(
                                                "7", t) -> editHours.setText("")
                                        }
                                    }


                                          with(view.secondHoras) {
                                                    when {
                                                        command.contains("uma") || command.contains(
                                                            "1", t) -> editHours.setText("01")

                                                        command.contains("duas") || command.contains(
                                                            "2", t) -> editHours.setText("")

                                                        command.contains("") || command.contains(
                                                            "3", t) -> editHours.setText("")

                                                        command.contains("") || command.contains(
                                                            "4",) -> editHours.setText("")

                                                        command.contains("") || command.contains(
                                                            "5", t) -> editHours.setText("")

                                                        command.contains("") || command.contains(
                                                            "6", t) -> editHours.setText("")

                                                        command.contains("") || command.contains(
                                                            "7", t) -> editHours.setText("")

                                                        command.contains("", t) || command.contains(
                                                            "8", t) -> editHours.setText("")

                                                        command.contains("", t) || command.contains(
                                                            "9", t) -> editHours.setText("")

                                                        command.contains("", t) || command.contains(
                                                            "10", t) -> editHours.setText("")

                                                        command.contains("onze") || command.contains(
                                                            "11", t) -> editHours.setText("11")
                                                    }
                                                }



                EventType.TRANSPORTS -> {
                            holder.itemView.contentDescription = "Aceder à secção de transportes"
                        }

                                        EventType.TRANSPORTS -> {
                                            text_timeline_info.text = "CLIQUE AQUI PARA MAIS INFORMAÇÕES"
                                            card_background_image.setBackgroundResource(R.drawable.stcp_background)
                                            card_center_icon.setBackgroundResource(R.drawable.bus_icon)
                                        }\


                                                        //newStartTime = "${newStartTime.substring(0, 2)} : ${newStartTime.substring(2, 4)}"

    // val sharedPreferences = ctx.getSharedPreferences(MODALITY, Context.MODE_PRIVATE).apply {


    }


    //REMOVED FRAGMENT TRANSITION LOGIC FROM ADAPTER


